- name: Install Python MySQL client
  ansible.builtin.apt:
    name: python3-pymysql

- name: Install MySQL server
  ansible.builtin.apt:
    name: mysql-server

- name: Ensure MySQL is started and enabled
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: yes

- name: MySQL database
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica


- name: MySQL user
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Create MySQL user for replication
  community.mysql.mysql_user:
    name: "replication"
    password: "{{ mysql_replication_password }}"
    host: "%"
    priv: "*.*:REPLICATION SLAVE"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present
  no_log: true

- name: Copy the override.cnf file to managed host
  ansible.builtin.template:
    src: override.conf.j2
    dest: /etc/mysql/mysql.conf.d/override.cnf
  notify: Restart MySQL if there is a configuration change

- name: Create user for MySQL exporter
  community.mysql.mysql_user:
    name: "{{ mysql_exporter_user }}"
    password: "{{ mysql_exporter_password }}"
    priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"
    state: present
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Copy my.cnf to remote host
  ansible.builtin.template:
    src: .my.cnf.j2
    dest: /var/lib/prometheus/.my.cnf
    owner: prometheus
    group: prometheus
    mode: '0600'
  notify: Restart MySQL exporter if authentication data changes
  no_log: true

- name: Ensure /home/backup/mysql directory exists
  ansible.builtin.file:
    path: /home/backup/mysql/
    state: directory
    owner: backup
    group: backup
    mode: '0775'

- name: Ensure backup user
  community.mysql.mysql_user:
    name: "backup"
    #password: {{ mysql_backup_password }}
    host: "%"
    priv: "agama.*:LOCK TABLES,SELECT"
    state: present
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Ensure MySQL client configuration for backup user is set up
  ansible.builtin.template:
    src: .my.cnf-backup.j2
    dest: /home/backup/.my.cnf
    owner: backup
    group: backup
    mode: '0600'

#- name: Ensure MySQL backup Cron job is scheduled
 # ansible.builtin.template:
  #  src: mysql-backup.j2
   # dest: /etc/cron.d/mysql-backup
    #owner: root
    #group: root
    #mode: '0744'

- name: Create cron job for MySQL backup
  ansible.builtin.cron:
    name: "MySQL backup"
    minute: "00"
    hour: "00"
    day: "*"
    month: "*"
    weekday: "*"
    user: "backup"
    job: "mysqldump agama > /home/backup/mysql/agama.sql"
    cron_file: "/etc/cron.d/mysql-backup"
    state: present


- name: Add Duplicity full backup job
  ansible.builtin.lineinfile:
    path: "/etc/cron.d/mysql-backup"
    regexp: "^.*duplicity.*full.*$"
    line: "1 00 * * * backup duplicity --no-encryption full /home/backup/mysql/ rsync://Kryptograafia@backup.kryptograafia.io./mysql"
    state: present

- name: Add Duplicity incremental backup job
  ansible.builtin.lineinfile:
    path: "/etc/cron.d/mysql-backup"
    regexp: "^.*duplicity.*incremental.*$"
    line: "1 00 * * * backup duplicity --no-encryption incremental /home/backup/mysql/ rsync://Kryptograafia@backup.kryptograafia.io./mysql"
    state: present

- name: Install the MySQL exporter
  ansible.builtin.apt:
    name: prometheus-mysqld-exporter
    state: present

- name: Ensure MySQL Exporter is started and enabled
  ansible.builtin.service:
    name: prometheus-mysqld-exporter
    state: started
    enabled: yes

- name: Configure the replica server
  community.mysql.mysql_variables:
    variable: read_only
    value: "{{ 'OFF' if inventory_hostname == mysql_host else 'ON' }}"
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica
